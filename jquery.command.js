// Generated by CoffeeScript 1.4.0
(function() {

  if (!window.Command && !window.Animate && !window.Prop && !window.Func && !window.Wait && !window.Trace && !window.Serial && !window.Parallel) {
    window.Command = {};
  }

  (function(w) {
    var $elms, $params, remove, skip;
    $elms = [];
    $params = [];
    w.Command = function() {
      return this.delegate;
    };
    w.Command.prototype = {
      execute: function() {},
      onComplete: function() {
        if (this.delegate) {
          return this.delegate();
        }
      }
    };
    w.Prop = function($elm, params) {
      $elms.push($elm);
      $params.push(params);
      this.propFunction = function() {
        return $elm.css(params);
      };
      return this;
    };
    w.Prop.prototype = new w.Command();
    w.Prop.prototype.execute = function() {
      this.propFunction();
      return this.onComplete();
    };
    w.Func = function(func) {
      this.targetFunction = func;
      return this;
    };
    w.Func.prototype = new w.Command();
    w.Func.prototype.execute = function() {
      this.targetFunction();
      return this.onComplete();
    };
    w.Wait = function(delay) {
      this.delay = delay;
      this.timer;
      return this;
    };
    w.Wait.prototype = new w.Command();
    w.Wait.prototype.execute = function() {
      var self;
      self = this;
      return this.timer = setTimeout(function() {
        return self.onComplete();
      }, this.delay);
    };
    w.Trace = function(log) {
      this.consoleLog = function() {
        return console.log('[info] - ' + log.toString());
      };
      return this;
    };
    w.Trace.prototype = new w.Command();
    w.Trace.prototype.execute = function() {
      this.consoleLog();
      return this.onComplete();
    };
    w.Animate = function($elm, params1, params2) {
      var options2;
      $elms.push($elm);
      $params.push(params1);
      options2 = $.extend({
        duration: 0,
        easing: 'linear',
        complete: function() {}
      }, params2);
      this.animateFunc = function() {
        return $elm.animate(params1, params2);
      };
      this.delay = options2.duration;
      this.timer;
      return this;
    };
    w.Animate.prototype = new w.Command();
    w.Animate.prototype.execute = function() {
      var self;
      this.animateFunc();
      self = this;
      return this.timer = setTimeout(function() {
        return self.onComplete();
      }, this.delay);
    };
    w.Parallel = function(coms) {
      if (coms) {
        this.commands = coms;
      } else {
        this.commands = [];
      }
      this.count;
      return this;
    };
    w.Parallel.prototype = new w.Command();
    w.Parallel.prototype.execute = function() {
      var command, i, len, self, _i, _ref, _results;
      if (this.commands.length === 0) {
        this.commands = [];
        return this.onComplete();
      } else {
        this.count = 0;
        i = 0;
        len = this.commands.length;
        command = null;
        self = this;
        _results = [];
        for (i = _i = 0, _ref = len - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          command = this.commands[i];
          command.delegate = function() {
            return self.commandComplete();
          };
          _results.push(command.execute());
        }
        return _results;
      }
    };
    w.Parallel.prototype.add = function(com) {
      return this.commands.push(com);
    };
    w.Parallel.prototype.commandComplete = function() {
      this.count++;
      if (this.count === this.commands.length) {
        return this.onComplete();
      }
    };
    w.Parallel.prototype.remove = function() {
      return remove(this);
    };
    w.Parallel.prototype.skip = function() {
      return skip(this);
    };
    w.Serial = function(coms) {
      if (coms) {
        this.commands = coms;
      } else {
        this.commands = [];
      }
      this.currentCommand;
      return this;
    };
    w.Serial.prototype = new w.Command();
    w.Serial.prototype.execute = function() {
      var self;
      if (this.commands.length === 0) {
        return this.onComplete();
      } else {
        this.currentCommand = this.commands.shift();
        self = this;
        this.currentCommand.delegate = function() {
          return self.commandComplete();
        };
        return this.currentCommand.execute();
      }
    };
    w.Serial.prototype.add = function(com) {
      return this.commands.push(com);
    };
    w.Serial.prototype.commandComplete = function() {
      this.currentCommand = null;
      return this.execute();
    };
    w.Serial.prototype.remove = function() {
      return remove(this);
    };
    w.Serial.prototype.skip = function() {
      return skip(this);
    };
    skip = function(_this) {
      var n;
      _this.commands = [];
      _this.currentCommand = null;
      _this.execute();
      n = 0;
      $elms.forEach(function(elm) {
        elm.stop().css($params[n]);
        return n++;
      });
      $elms = [];
      return $params = [];
    };
    remove = function(_this) {
      _this.commands = [];
      _this.currentCommand = null;
      _this.execute();
      $elms.forEach(function(elm) {
        return elm.stop();
      });
      return $elms = [];
    };
    return this;
  })(window);

}).call(this);
